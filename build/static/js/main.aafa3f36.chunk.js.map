{"version":3,"sources":["Components/Info.js","Components/Weather.js","Components/Servise1.js","Components/Servise2.js","App.js","serviceWorker.js","index.js"],"names":["Info","react_default","a","createElement","Weather","props","className","error","city","temp","humidity","speed","Servise1","id","onSubmit","WeatherMethod","type","name","placeholder","Servise2","WeatherMethod2","API_KEY1","API_KEY2","App","state","undefined","isOpenForm1","isOpenForm2","gettingWeather2","_callee","event","api_url","data","spd","spd_n","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","wind_spd","toFixed","_this","setState","city_name","rh","stop","gettingWeather","_callee2","temp_C","_context2","Math","floor","main","wind","handleClick1","handleClick2","showForm1","this","Components_Servise1","showForm2","Components_Servise2","Components_Info","onClick","Components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aafa3f36.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Info = () => (\r\n    <div>\r\n        <h2>Прогноз погоды</h2>\r\n    </div>\r\n)\r\n\r\nexport default Info;","import React from \"react\";\r\n\r\nconst Weather = (props) => {\r\n    return (\r\n        <div>\r\n            <p className=\"error\">{props.error}</p>\r\n            {props.city &&\r\n                <div className=\"infoWeath\">\r\n                    <p>Город: {props.city}</p>\r\n                    <p>Температура: {props.temp} °C</p>\r\n                    <p>Влажность: {props.humidity} %</p>\r\n                    <p>Скорость ветра: {props.speed} м/с</p>\r\n                    \r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather;","import React from \"react\";\r\n\r\n\r\nconst Servise1 = (props) => {\r\n\r\n    return (\r\n\r\n        <div className=\"infoWeath\">\r\n            OpenWeatherMap (EN)\r\n            <form id=\"form1\" onSubmit={props.WeatherMethod}>\r\n                <input type=\"text\" className=\"form-control\" name=\"city\" placeholder=\"Город\" />\r\n                <button className=\"btn btn btn-warning\">Выполнить</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Servise1;","import React from \"react\";\r\n\r\n\r\nconst Servise2 = (props) => {\r\n\r\n    return (\r\n\r\n        <div className=\"infoWeath\">\r\n            Weatherbit (RU)\r\n            <form id=\"form2\" onSubmit={props.WeatherMethod2}>\r\n                <input type=\"text\" className=\"form-control\" name=\"city\" placeholder=\"Город\" />\r\n                <button className=\"btn btn btn-warning\">Выполнить</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Servise2;","import React from 'react';\nimport './App.css';\nimport Info from \"./Components/Info\";\nimport Weather from './Components/Weather';\nimport Servise1 from './Components/Servise1';\nimport Servise2 from './Components/Servise2';\n\nconst API_KEY1 = \"f1ddfa583287f2bbec33f2c5761eec8a\";\nconst API_KEY2 = \"56f0549c822349cab776d68706414059\";\n\nclass App extends React.Component {\n\n  state = {\n    temp: undefined,\n    city: undefined,\n    humidity: undefined,\n    speed: undefined,\n    error: undefined,\n    isOpenForm1: false,\n    isOpenForm2: false\n  }\n\n  gettingWeather2 = async (event) => {\n    event.preventDefault();\n    const city = event.target.elements.city.value;\n\n    if (city) {\n      const api_url = await\n        fetch(`https://api.weatherbit.io/v2.0/current?key=${API_KEY2}&city=${city}&lang=ru&units=M`);\n      const data = await api_url.json();\n      console.log(data);\n\n      var spd = data.data[0].wind_spd;\n      var spd_n = spd.toFixed(1);\n\n      this.setState({\n        temp: data.data[0].temp,\n        city: data.data[0].city_name,\n        humidity: data.data[0].rh,\n        speed: spd_n,\n        error: undefined\n      });\n    } else {\n      this.setState({\n        temp: undefined,\n        city: undefined,\n        humidity: undefined,\n        speed: undefined,\n        error: \"Вы не ввели название города!\"\n      })\n    }\n  }\n\n  gettingWeather = async (event) => {\n    event.preventDefault();\n    const city = event.target.elements.city.value;\n\n    if (city) {\n      const api_url = await\n        fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY1}`);\n      const data = await api_url.json();\n      console.log(data);\n\n      var temp_C = Math.floor(data.main.temp - 273.15);\n\n      this.setState({\n        temp: temp_C,\n        city: data.name,\n        humidity: data.main.humidity,\n        speed: data.wind.speed,\n        error: undefined\n      });\n    } else {\n      this.setState({\n        temp: undefined,\n        city: undefined,\n        humidity: undefined,\n        speed: undefined,\n        error: \"Вы не ввели название города!\"\n      })\n    }\n  }\n\n  render() {\n    const showForm1 = this.state.isOpenForm1 &&\n      <Servise1 WeatherMethod={this.gettingWeather} />\n\n    const showForm2 = this.state.isOpenForm2 &&\n      <Servise2 WeatherMethod2={this.gettingWeather2} />\n\n    return (\n      <div className=\"wrapper\">\n        <div className=\"main\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-sm-5 info\">\n                <Info />\n              </div>\n\n              <div className=\"col-sm-7 form\">\n                <div className=\"infoWeath\">\n                  Выберите сервис:\n                  <button className=\"btns btn-secondary\" onClick={this.handleClick1}>\n                  OpenWeatherMap</button>\n                  <button className=\"btns btn-secondary\" onClick={this.handleClick2}>\n                  Weatherbit\n                  </button>\n                </div>\n\n                {showForm1}\n                {showForm2}\n                <Weather\n                  temp={this.state.temp}\n                  city={this.state.city}\n                  humidity={this.state.humidity}\n                  speed={this.state.speed}\n                  error={this.state.error}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  handleClick1 = () => {\n    this.setState({\n      isOpenForm1: true,\n      isOpenForm2: false\n    });\n  }\n  handleClick2 = () => {\n    this.setState({\n      isOpenForm1: false,\n      isOpenForm2: true\n    });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}